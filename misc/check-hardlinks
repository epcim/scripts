#!/bin/bash
#############################################################################
#   check-hardlinks                                                         #
#                                                                           #
# Script for checking hardlinks defined in a so-called hardlinks file.      #
# Reports on the status of the checked hardlinks, and can optionally fix    #
# linking inconsistencies.                                                  #
#                                                                           #
# Version history:                                                          #
#   v0.5    Add --fix-broken to replace the deprecated --fix option         #
#           Add --fix-unreachable to fix unreachable files                  #
#           Revamp return code mechanism                                    #
#           Display reference file next to files with issues                #
#           Use enhanced getopt(1) for options parsing                      #
#   v0.4    Report and fix diverged files with --fix-diverged               #
#           Colorize the output, add the --no-colors option                 #
#           Handle multiple hardlinks files on the command line             #
#           Add --version flag                                              #
#   v0.3    Fix missing files with --fix-missing                            #
#           Add --quiet option, properly define return codes                #
#           Ignore comments in hardlinks file, tilde-expand file names      #
#   v0.2    Add -f option to fix broken links                               #
#   v0.1    Report broken links or missing files                            #
#############################################################################


# Build full name
[[ "${0:0:1}" == "/" ]] && FULL_0="$0" || FULL_0="$PWD/$0"

# Source required modules (bashmod first, then use it for the others)
[[ ! -r "${BASH_MODULES_SCRIPT=${FULL_0%/*}/../bash/functions/bashmod}" ]] && { echo "Error: This script requires the 'bashmod' module, please specify its path
       with the BASH_MODULES_SCRIPT environment variable." ; exit 255 ; }
source "$BASH_MODULES_SCRIPT"
bashmod die
bashmod tilde

# Define some constants
VERSION=0.5


# Define some helper functions
# checklog: log an aligned message about some checked file and update the global return code
function checklog() { # 1:code 2:message 3:file 4:reference
    local MALIGN=23                  # Message alignment
    local FALIGN=30                  # File alignment

    if ! $QUIET
    then
        if ! $NOCOLORS
        then
            local BLACK='\E[0m'         # Not real black: default setting, in fact
            local GREEN='\E[1;32;32m'   # Bold green color
            local RED='\E[1;31;31m'     # Bold red color

            local COLOR
            (( $1 == 0 )) && COLOR="$GREEN" || COLOR="$RED"
        fi

        printf "[${COLOR}*${BLACK}] %-${MALIGN}s %-${FALIGN}s" "$2" "$3"
        [[ -n "$4" ]] && printf " (reference: %s)\n" "$4" || printf "\n"
    fi

    RC=$(($RC | $1))
}


# Check the arguments
if [[ $# == 0 || "$1" == "-h" || "$1" == "--help" ]]
then
    echo "  Usage: ${0##*/} [options] <hardlinks files>

Check the consistency of hardlinks described in hardlinks files.

A hardlinks file shall contain several lines, each line consisting of a
list of files sharing the same inode. The first file on a line is used
as reference file when fixing broken links and diverged or missing
files. When fixing unreachable files, intermediate directories are
created as necessary.
Hardlinks files may contain comments (whole-line or end-of-line).

Available options:
    -b|--fix-broken         fix broken hardlinks
    -c|--no-colors          disable colors in the output
    -d|--fix-diverged       fix diverged files (/!\\ USE CAUTION /!\\)
    -f|--fix                synonym for --fix-broken (deprecated)
    -m|--fix-missing        fix missing files
    -q|--quiet              be quiet (return code indicates status)
    -u|--fix-unreachable    fix unreachable files
    -V|--version            print the version number

TIP: To fix anything without thinking (indeed), use:
       ${0##*/} -dumb <hardlinks files>

Return codes (if not 0, the actual return code is an or-combination of
the return codes for all unfixed issues that were encountered):
    0       all links ok
    1       some links broken (fix with --fix-broken)
    2       some files missing (fix with --fix-missing)
    4       some files diverged (fix with --fix-diverged)
    8       some files unreachable (fix with --fix-unreachable)
    16      some reference files missing (no fix)
    128     other error"
    exit
fi

# Process options
getopt -T &> /dev/null
(( $? != 4 )) && die -r128 "your getopt version is too old, get the enhanced getopt from util-linux!"
GETOPT="$(getopt -n "${0##*/}" -l fix-broken,no-colors,fix-diverged,fix,fix-missing,quiet,fix-unreachable,version -o +bcdfmquV -- "$@")"
(( $? != 0 )) && exit 128
eval set -- "$GETOPT"

NOCOLORS=false
FIXBROKEN=false
FIXDIVERGED=false
FIXMISSING=false
FIXUNREACHABLE=false
QUIET=false
while true
do
    case "$1" in
        -b|--fix-broken) FIXBROKEN=true ;;
        -c|--no-colors) NOCOLORS=true ;;
        -d|--fix-diverged) FIXDIVERGED=true ;;
        -f|--fix)
            FIXBROKEN=true
            echo "Warning: the $1 option is deprecated, use --fix-broken instead" >&2
            ;;
        -m|--fix-missing) FIXMISSING=true ;;
        -q|--quiet) QUIET=true ;;
        -u|--fix-unreachable) FIXUNREACHABLE=true ;;
        -V|--version)
            echo "${0##*/} version $VERSION"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *) die -r128 "internal error!" ;;
    esac
    shift
done
# Test for remaining arguments
(( $# < 1 )) && die -r128 "missing hardlinks file"
# Test for valid hardlinks files
for F in "$@"
do
    [[ ! -r "$F" ]] && die -r128 "invalid hardlinks file '$F'"
done

# For each hardlinks file
FIX=0
RC=0
while (( $# != 0 ))
do
    # Read the hardlinks file line by line
    while read FILES
    do
        # Check that all files on a single line share the same inode
        INODE=0
        for FN in $FILES
        do
            # Check for comments
            [[ "${FN:0:1}" == "#" ]] && break
            # Perform tilde expansion
            F="$(tilde "$FN")"
            # Check that the file exists
            if [[ ! -f "$F" ]]
            then
                if (( $INODE == 0 ))
                then
                    checklog 16 "Missing reference:" "$FN"
                    break
                else
                    if [[ "$F" != "${F%/*}" && ! -d "${F%/*}" ]]
                    then
                        if $FIXUNREACHABLE
                        then
                            mkdir -p "${F%/*}"
                            ln "$FILE" "$F"
                            checklog 0 "Fixed unreachable file:" "$FN" "$FILEN"
                            FIX=1
                        else
                            checklog 8 "Unreachable file:" "$FN" "$FILEN"
                        fi
                    else
                        if $FIXMISSING
                        then
                            ln "$FILE" "$F"
                            checklog 0 "Fixed missing file:" "$FN" "$FILEN"
                            FIX=1
                        else
                            checklog 2 "Missing file:" "$FN" "$FILEN"
                        fi
                    fi
                fi
                continue
            fi
            # Get the file's inode
            IF=$(stat -c %i "$F")
            # Take the path and inode of the first file as a reference
            if (( $INODE == 0 ))
            then
                FILE="$F"
                FILEN="$FN"
                INODE=$IF
            # Check against the inode of the reference file
            elif (( $INODE != $IF ))
            then
                # Inodes do not match: check whether the files are different
                if diff -q "$FILE" "$F" &> /dev/null
                then
                    # Files are identical, that's simply a broken hardlink
                    if $FIXBROKEN
                    then
                        rm "$F"
                        ln "$FILE" "$F"
                        checklog 0 "Fixed broken hardlink:" "$FN" "$FILEN"
                        FIX=1
                    else
                        checklog 1 "Broken hardlink:" "$FN" "$FILEN"
                    fi
                else
                    # Files have diverged
                    if $FIXDIVERGED
                    then
                        rm "$F"
                        ln "$FILE" "$F"
                        checklog 0 "Fixed diverged files:" "$FN" "$FILEN"
                        FIX=1
                    else
                        checklog 4 "Diverged files:" "$FN" "$FILEN"
                    fi
                fi
            fi
        done
    done < "$1"
    # Move on to the next file
    shift
done
# Display something if all went good
(( $FIX == 0 && $RC == 0 )) && checklog 0 "All good."

# Return the global return code
exit $RC

