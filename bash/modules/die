#!/bin/bash
# die - print a message and exit on error, preserving original error code

function die() {
    # Get the last return code
    local rc=$?
    local prefix="Error: "
    local msg
    # Parse arguments
    while [[ $# -gt 0 ]]
    do
        case "$1" in
            -h|--help)
                # Special case: print help and return (no exit)
                echo "  Usage: $FUNCNAME [options] [error message]

Options:
  -i|--inline               only print the error message (no prefix)
  -p|--prefix <prefix>      set the prefix preceding the error message
                            default: \"Error: \"
  -r|--return <code>        set the return code
                            default: \$?"
                return
                ;;

            -i|--inline)
                prefix=""
                ;;

            -p*|--prefix)
                prefix=""
                [[ "${1:0:2}" == "-p" ]] && prefix=${1#-p}
                [[ -z "$prefix" ]] && { prefix="$2" ; shift ; }
                ;;

            -r*|--return)
                rc=""
                [[ "${1:0:2}" == "-r" ]] && rc=${1#-r}
                [[ -z "$rc" ]] && { rc="$2" ; shift ; }
                ;;

            --)
                shift
                break
                ;;

            *)
                # Don't die on unknown arg, we're already dying
                break
                ;;
        esac
        shift
    done
    # Get the message
    while [[ $# -gt 0 ]]
    do
        msg="${msg:+$msg }$1"
        shift
    done
    # Handle empty message a bit differently
    [[ -z "$msg" ]] && { prefix="" ; msg="Error!" ; }
    # Print message
    echo -e "$prefix$msg" 1>&2
    # Exit with return code (return if interactive)
    [[ $- == *i* ]] && return $rc || exit $rc
}

