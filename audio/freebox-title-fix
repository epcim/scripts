#!/bin/bash
# "Fix" the title tags of audio tracks by prepending them with the track #

# Build full name
[[ "${0:0:1}" == "/" ]] && full_0="$0" || full_0="$PWD/$0"

# Source required modules (bashmod first, then use it for the others)
[[ ! -r "${BASH_MODULES_SCRIPT=${full_0%/*}/../bash/modules/bashmod}" ]] && { printf "Error: This script requires the 'bashmod' module, please specify its path\n       with the BASH_MODULES_SCRIPT environment variable.\n" ; exit 255 ; }
source "$BASH_MODULES_SCRIPT"
bashmod die

if (( $# < 1 )) || [[ "$1" =~ ^(-h|--help)$ ]]
then
    cat <<- EOF
	  Usage: ${0##*/} [options] <directories>
	
	Prepend the track # to the title tag of audio tracks in a directory.
	For MP3, also convert the id3 tags to v2.4, stripping all other versions.
	
	Supported file formats:
	    mp3
	    ogg
	    flac
	
	Options:
	    -q | --quiet        proceed without confirmation
	    -R | --reverse      do the reverse: strip the track # from the title tag
	
	Note:
	* The first space-delimited block of characters in the filename is assumed to
	  be the track # (this is highly tied to the organization of my library).
	* The main purpose of this tool is to work around a misfeature in the
	  shitty DLNA music player of my ISP's set-top box, which orders tracks
	  alphabetically by title tag -- not even by filename! *sigh*
	
	EOF
    exit
fi

function require() {    #1:tool [2:variable] [3+:paths]
    local tool="$1"
    local var="$2"
    [[ -z "$var" ]] && var="$tool"
    shift 2
    if command -v "$tool" &> /dev/null
    then
        eval $var="\$tool"
        return
    fi
    for p in "$@"
    do
        if command -v "$p/$tool" &> /dev/null
        then
            if [[ "${p:0:1}" == "/" ]]
            then
                eval $var="\$p/\$tool"
            else
                eval $var="\$PWD/\$p/\$tool"
            fi
            return
        fi
    done

    die "the \`$tool\` utility is required but not found in your PATH!"
}

function tracktitle() { #1:file [2:escape]
    local title
    case "${1##*.}" in
        mp3) title="$($id3ted -l "$1" | sed -ne '/^TIT2:/ s/TIT2: //p')" ;;
        ogg) title="$($vorbiscomment -l "$1" | sed -ne '/^title=/ s/title=//p')" ;;
        flac) title="$($metaflac --list "$1" | sed -ne '/^ *comment\[[0-9]\+\]: TITLE=/ s/^.*=//p')" ;;
    esac
    $reverse && title="${title#* - }" || title="${1%% *} - $title"
    ${2:-false} && sed -e 's/\\/\\\\/g' -e 's,/,\/,g' -e 's/&/\&/g' <<< "$title" || echo "$title"
}

# Check for required utilities
require id3ted
require vorbiscomment
require vorbised vorbised "${0%/*}"
require metaflac
require sedaflac sedaflac "${0%/*}"

# Don't use * literally when no files are matched
shopt -s nullglob
# Don't bother with the case of the file extension
shopt -s nocaseglob
shopt -s nocasematch

# Parse command line
getopt -T &> /dev/null
(( $? != 4 )) && die -r128 "your getopt version is too old, get the enhanced getopt from util-linux!"
getopt="$(getopt -n "${0##*/}" -l quiet,reverse -o qR -- "$@")"
(( $? != 0 )) && exit 128
eval set -- "$getopt"

# Process options
quiet=false
reverse=false
while true
do
    case "$1" in
        -q|--quiet) quiet=true ;;
        -R|--reverse) reverse=true ;;
        --) shift ; break ;;
        *) die -r128 "internal error!" ;;
    esac
    shift
done

# Process directories
(( $# < 1 )) && die -r128 "missing directories"
for d in "$@"
do
    if ! [[ -d "$d" ]]
    then
        printf "Skipping '%s': no such directory\n" "$d"
        continue
    fi
    cd "$d"
    d="${d%/}"
    proceed=true
    refresh=true
    empty=true
    if ! $quiet
    then
        while $refresh
        do
            refresh=false
            printf "Overview for '%s':" "$d"
            for f in *.mp3 *.ogg *.flac
            do
                empty=false
                printf "\n  %s" "$(tracktitle "$f")"
            done
            if $empty
            then
                printf "\E[2K\rSkipping '%s': no tracks\n" "$d"
                proceed=false
            else
                echo
                read -r -p "Proceed? [y/N/r] " ans
                case "${ans,,}" in
                    y|yes) proceed=true ;;
                    r|refresh) refresh=true ;;
                    *) proceed=false ;;
                esac
            fi
        done
    fi
    if $proceed
    then
        for f in *.mp3 *.ogg *.flac
        do
            empty=false
            printf "\E[2K\rProcessing '%s'... %s" "$d" "$f"
            case "${f##*.}" in
                mp3)
                    $id3ted -2 "$f"
                    $id3ted -t "$(tracktitle "$f")" "$f"
                    $id3ted -s "$f"
                    ;;
                ogg)
                    $vorbised 's/^title=\(.*\)/title='"$(tracktitle "$f" true)"'/' "$f"
                    ;;
                flac)
                    $sedaflac 's/^TITLE=\(.*\)/TITLE='"$(tracktitle "$f" true)"'/' "$f"
                    ;;
            esac
        done
        $empty && printf "Skipping '%s': no tracks\n" "$d" || printf "\E[2K\rProcessing '%s'... done\n" "$d"
    fi
    $quiet || echo
    cd "$OLDPWD"
done

