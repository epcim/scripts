#!/bin/bash
#############################################################################
#   awvol                                                                   #
#                                                                           #
# Volume setter and notifier for awesome, with naughty-fications.           #
#                                                                           #
# Version history:                                                          #
#   v0.3    Improve error handling of bad input/environment                 #
#           Add -C option to select sound card                              #
#           Tweak the amixer backend                                        #
#   v0.2    Add -t option to define the naughty-fication timeout            #
#   v0.1    Initial version: get, set, mute/unmute/toggle                   #
#############################################################################


# Source required modules (bashmod first, then use it for the others)
[[ "${0:0:1}" == "/" ]] && full_0="$0" || full_0="$PWD/$0"
[[ ! -r "${BASH_MODULES_SCRIPT=${full_0%/*}/../bash/modules/bashmod}" ]] && { echo "Error: This script requires the 'bashmod' module, please specify its path
       with the BASH_MODULES_SCRIPT environment variable." ; exit 255 ; }
source "$BASH_MODULES_SCRIPT"
bashmod die


# Constants definitions
version=0.3


# Function definitions
function regexp_escape() { # 1:string
    sed -e 's/\./\\./g' -e 's,/,\/,g' <<< "$1"
}

function amixer() { # @:options
    command amixer ${card:+-c "$card"} "$@"
}

function default_backend() {
    for b in pulseaudio alsa
    do
        if check_backend "$b"
        then
            echo "$b"
            return
        fi
    done
    return 1
}

function check_backend() { # 1:backend
    case "$1" in
        alsa|amixer)         command -v amixer &>/dev/null ; return $? ;;
        pa|pulseaudio|pactl) command -v pactl &>/dev/null ; return $? ;;
    esac
    return 1
}

function default_channel() { # 1:backend
    case "$1" in
        alsa|amixer)         echo "Master" ;;
        pa|pulseaudio|pactl) echo "$(pactl info | sed -ne '/^Default Sink:/ s/^Default Sink: //p')" ;;
        *)                   return 1 ;;
    esac
}

function volume_get() {
    # Get the volume
    local get left right mono mute
    case "$backend" in
        alsa|amixer)
            get="$(amixer -M -- get "$channel")"
            mono="$(sed -ne '/^  Mono:/ s/.*\[\([0-9]\+%\)\].*$/\1/p' <<< "$get")"
            left="$(sed -ne '/^  Front Left:/ s/.*\[\([0-9]\+%\)\].*$/\1/p' <<< "$get")"
            right="$(sed -ne '/^  Front Right:/ s/.*\[\([0-9]\+%\)\].*$/\1/p' <<< "$get")"
            mute="$(sed -ne '/^  Front Left:/ s/.*\[\(on\|off\)\]$/\1/p' <<< "$get")"
            [[ -z "$mute" ]] && mute="$(sed -ne '/^  Mono:/ s/.*\[\(on\|off\)\]$/\1/p' <<< "$get")"
            ;;
        pa|pulseaudio|pactl)
            get="$(pactl list sinks)"
            left="$(sed -ne '/Name: '"$(regexp_escape "$channel")"'/,+7 {1,+6d; s/[[:blank:]]*Volume: front-left: [^/]*\/[[:space:]]*\([0-9]\+%\).*$/\1/p}' <<< "$get")"
            right="$(sed -ne '/Name: '"$(regexp_escape "$channel")"'/,+7 {1,+6d; s/[[:blank:]]*Volume: .*front-right: [^/]*\/[[:space:]]*\([0-9]\+%\).*$/\1/p}' <<< "$get")"
            mute="$(sed -ne '/Name: '"$(regexp_escape "$channel")"'/,+6 {1,+5d; s/[[:blank:]]*Mute: //p}' <<< "$get")"
            ;;
    esac
    # Display it
    local message
    if [[ -n "$left" && -n "$right" ]]
    then
        message="L: $left  R: $right"
    elif [[ -n "$mono" ]]
    then
        message="$mono"
    else
        die "unable to extract volume information"
    fi
    [[ "$mute" == "yes" || "$mute" == "off" ]] && message+="  MUTE"
    case "$frontend" in
        stdout)  echo "$message" ;;
        naughty) awesome-client - <<< "require('naughty').notify({ text='$(sed -e "s/'/\\'/g" <<< "$message")', title='Volume', timeout=$timeout})" ;;
        *)       die "invalid frontend" ;;
    esac
}


# Check the arguments
if [[ "$1" == "-h" || "$1" == "--help" ]]
then
    cat <<- EOF
	  Usage: ${0##*/} [options] <actions>
	
	Actions:
	    get                     print the current volume
	    set <vol>               set/alter the volume to/by <vol>
	                            refer to the backend documentation for details
	    mute
	    unmute
	    toggle                  alter the muting state
	
	Options:
	    -b | --backend <tool>   select the audio backend tool:
	                            alsa,amixer, pa,pulseaudio,pactl    (default: $(default_backend))
	    -f | --frontend <tool>  select the display frontend tool:
	                            stdout, naughty                     (default: naughty)
	    -C | --card <card>      sound card to operate on
	                            refer to the backend documentation for details
	    -c | --channel <chan>   channel to operate on
	                            refer to the backend documentation for details
	    -t | --timeout <to>     timeout for the naughty-fication
	    -h | --help             this help
	    -V | --version          print the version number
	EOF
    exit
fi

# Process options
getopt -T &> /dev/null
(( $? != 4 )) && die -r128 "your getopt version is too old, get the enhanced getopt from util-linux!"
GETOPT="$(getopt -n "${0##*/}" -l backend:,frontend:,card:,channel:,timeout:,version -o +b:f:C:c:t:V -- "$@")"
(( $? != 0 )) && exit 128
eval set -- "$GETOPT"

backend="$(default_backend)" || die "no available backend"
frontend=naughty
card=
channel="$(default_channel "$backend")"
channel_set=false
timeout=1
while true
do
    case "$1" in
        -b|--backend)
            check_backend "$2" && backend="$2" || die "invalid backend: $2"
            $channel_set || channel="$(default_channel "$backend")" || die "no channel for backend: $backend"
            shift
            ;;
        -f|--frontend)
            frontend="$2"
            shift
            ;;
        -C|--card)
            card="$2"
            shift
            ;;
        -c|--channel)
            channel="$2"
            channel_set=true
            shift
            ;;
        -t|--timeout)
            timeout="$(($2))"
            shift
            ;;
        -V|--version)
            echo "${0##*/} v$version"
            exit
            ;;
        --)
            shift
            break
            ;;
        *) die "internal error!" ;;
    esac
    shift
done
# Test for remaining arguments
(( $# < 1 )) && die "missing action"

# Process the action
case "$1" in
    get)
        (( $# > 1 )) && die "too many arguments for action '$1'"
        volume_get
        ;;

    set)
        (( $# < 1 )) && die "not enough arguments for action '$1'"
        (( $# > 2 )) && die "too many arguments for action '$1'"
        # Set the volume
        case "$backend" in
            alsa|amixer)
                amixer -q -M -- set "$channel" "$2"
                ;;
            pa|pulseaudio|pactl)
                case "$2" in
                    mute|unmute|toggle)
                        mode="$2"
                        [[ "$2" == "mute" ]] && mode=1
                        [[ "$2" == "unmute" ]] && mode=0
                        pactl -- set-sink-mute "$channel" "$mode"
                        ;;
                    *)
                        pactl -- set-sink-volume "$channel" "$2"
                        ;;
                esac
            ;;
        esac
        # Display it
        volume_get
        ;;

    mute|unmute|toggle)
        (( $# > 1 )) && die "too many arguments for action '$1'"
        # Mute/unmute/toggle the volume
        case "$backend" in
            alsa|amixer)
                amixer -q -M -- set "$channel" "$1"
                ;;
            pa|pulseaudio|pactl)
                mode="$1"
                [[ "$1" == "mute" ]] && mode=1
                [[ "$1" == "unmute" ]] && mode=0
                pactl -- set-sink-mute "$channel" "$mode"
            ;;
        esac
        # Display it
        volume_get
        ;;
    *) die "unknown action: $1" ;;
esac

