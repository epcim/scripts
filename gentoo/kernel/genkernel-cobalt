#!/bin/bash
# genkernel-cobalt - kernel and initramfs generation script for Cobalt

#TODO: when not building modules, check modules are correctly signed (esp. nvidia modules embedded in initramfs, but more generally all AMODULES_*)
#TODO: print status of envvars at start


# Early functions
die() { # *:message
    printf "Error: %s\n" "$*"
    exit 1
} >&2


# Early environment
: "${KERNELDIR:=/usr/src/linux}"
: "${KERNELENV:=$KERNELDIR/.gkenv}"
if [[ -f "$KERNELENV" ]]
then
    source "$KERNELENV" || die "failed to source configuration variables from $KERNELENV"
fi

# Environment variables
: "${KERNELNAME:=$(uname -n)}"
KERNELVER="${KERNELVER#-}"
: "${KERNELCONF:=$KERNELDIR/.config.$KERNELNAME${KERNELVER:+-$KERNELVER}}"
: "${EFIPART:=/boot/efi}"
: "${EFIKERNEL:=/EFI/Boot/gentoo-$KERNELNAME${KERNELVER:+-$KERNELVER}.efi}"
: "${EFIOLDKERNEL:=$EFIKERNEL.old}"
: "${EFILABEL:=Gentoo Linux${KERNELVER:+ ($KERNELVER)}}"
: "${EFIVARFS:=efivarfs}"
EMERGEOPTS=( $EMERGEOPTS )
: "${GK_LOGLEVEL:=1}"
: "${SBMAN:=/boot/keys/sbman}"

# Global variables
efipart_mounted=false
extract_module_sig_script="$KERNELDIR/scripts/extract-module-sig.pl"

red="\E[1;31m"
black="\E[00m"


# Functions
help() {
    cat <<-EOF
	  Usage: ${0##*/} [options]
	
	Builds a kernel and its integrated initramfs for Cobalt.
	Includes LUKS, BTRFS, the fr-bÃ©po keymap, and optionally the nVidia drivers.
	Can also sign (for Secure Boot), install the kernel to an EFI System
	partition, and emerge (and sign) out-of-tree modules.
	
	The kernel is configured and built in \$KERNELDIR (default "/usr/src/linux"):
	    ${KERNELDIR:-(empty)}
	with name \$KERNELNAME (default "\$(uname -n)"):
	    ${KERNELNAME:-(empty)}
	and local version suffix \$KERNELVER (default ""):
	    ${KERNELVER:-(empty)}
	using configuration \$KERNELCONF (default "\$KERNELDIR/.config.\$KERNELNAME-\$KERNELVER"):
	    ${KERNELCONF:-(empty)}
	EOF
    if [[ "$1" == "full" ]]
    then
        cat <<-EOF
		The EFI System partition is mounted at \$EFIPART (default "/boot/efi"):
		    ${EFIPART:-(empty)}
		The EFI kernel path is \$EFIKERNEL (default "/EFI/Boot/gentoo-\$KERNELNAME-\$KERNELVER.efi"):
		    ${EFIKERNEL:-(empty)}
		The EFI old kernel path is \$EFIOLDKERNEL (default "\$EFIKERNEL.old"):
		    ${EFIOLDKERNEL:-(empty)}
		The EFI boot label is \$EFILABEL (default "Gentoo Linux (\$KERNELVER)"):
		    ${EFILABEL:-(empty)}
		The EFI variables filesystem is \$EFIVARFS (default "efivarfs"):
		    ${EFIVARFS:-(empty)}
		Emerge is called with additional options from \$EMERGEOPTS (default empty):
		    ${EMERGEOPTS:-(empty)}
		Genkernel is called with loglevel \$GK_LOGLEVEL (default 1):
		    ${GK_LOGLEVEL:-(empty)}
		EOF
    fi
	cat <<-EOF
	
	If \$KERNELVER is not set, its value is set to the value of kernel configuration item CONFIG_LOCALVERSION.
	
	Configuration variables are sourced from \$KERNELENV (default "\$KERNELDIR/.gkenv") if it exists.
	
	Options:
	    -n                      negate a following short option
	    -e | --[no-]efi         update the EFI System partition
	                            (default: enabled)
	    -k | --[no-]kernel      build the kernel itself
	                            (default: enabled)
	    -s | --[no-]secure-boot sign kernel for SecureBoot (using \`sbman\`, UNRELEASED)
	                            (default: enabled)
	    -m | --[no-]modules     emerge @module-rebuild
	                            (default: enabled)
	    -N | --[no-]nvidia      include drivers from x11-drivers/nvidia-drivers
	                            (default: disabled if CONFIG_DRM_NOUVEAU is set, enabled otherwise)
	    -b | --[no-]backup      backup current EFI kernel to \$EFIOLDKERNEL
	                            (default: enabled)
	    -h | --help [full]      display help
	EOF
    exit
}

require() {     # 1:command 2:reqby
    command -v "$1" &>/dev/null || die "missing required tool $1${2:+ for $2}"
}

require_package() { # 1:package 2:reqby *:useflags
    local package="$1" reqby="$2"
    shift 2
    [[ -n "$(portageq best_version / "$package")" ]] || die "missing required package $package${reqby:+ for $reqby}"
    for use in "$@"; do
        equery u "$package" | grep -q ^+"$use" || die "missing required USE $package[$use]${reqby:+ for $reqby}"
    done
}

require_openssl() { # 1:command 2:reqby
    [[ "$(openssl no-"$1")" == "$1" ]] || die "missing required OpenSSL command $1${2:+ for $2}"
}

verbosedo() {   # 1:error_message *:command
    local err="$1"
    shift
    echo ">>> $*"
    "$@" || die "$err"
}

cleanup() {
    [[ "$efivarfs_access" == ro ]] && { mount -o remount,ro "$EFIVARFS" || echo "Error: failed to remount EFI variables filesystem $EFIVARFS read-only"; }
    $efipart_mounted && { umount "$EFIPART" || echo "Error: failed to unmount EFI System partition at $EFIPART"; }
}


# Traps
trap -- cleanup EXIT


# Display help
if [[ "$1" =~ ^(-h|--help)$ ]]
then
    shift
    help "$@"
fi

# Check kernel config
[[ -f "$KERNELCONF" ]] || die "missing configuration file: $KERNELCONF"

# Check early requirements
require getopt

# Process options
getopt -T &> /dev/null
(( $? != 4 )) && die "your getopt version is too old, get the enhanced getopt from util-linux!"
getopt="$(getopt -n "${0##*/}" -l help,efi,no-efi,kernel,no-kernel,secure-boot,no-secure-boot,modules,no-modules,nvidia,no-nvidia,backup,no-backup -o +hneksmNb -- "$@")" || exit 1
eval set -- "$getopt"
true=true       # trick for -n
negate=false
efi=true
kernel=true
secureboot=true
modules=true
nvidia="$(grep -qxF 'CONFIG_DRM_NOUVEAU=y' "$KERNELCONF" && echo false || echo true)"
backup=true
while true
do
    # Negate if previous option was -n, and reset negation
    $negate && true=false
    negate=false
    case "$1" in
        -h|--help) help ;;
        -n) negate=true ;;
        -e) efi=$true ;;
        --efi) efi=true ;;
        --no-efi) efi=false ;;
        -k) kernel=$true ;;
        --kernel) kernel=true ;;
        --no-kernel) kernel=false ;;
        -s) secureboot=$true ;;
        --secure-boot) secureboot=true ;;
        --no-secure-boot) secureboot=false ;;
        -m) modules=$true ;;
        --modules) modules=true ;;
        --no-modules) modules=false ;;
        -N) nvidia=$true ;;
        --nvidia) nvidia=true ;;
        --no-nvidia) nvidia=false ;;
        -b) backup=$true ;;
        --backup) backup=true ;;
        --no-backup) backup=false ;;
        --) shift ; break ;;
        *) die "getopt failure" ;;
    esac
    # Reset trueness
    true=true
    shift
done


# Check requirements
if $kernel
then
    require chmod --kernel
    require mkdir --kernel
    require genkernel --kernel
    require chgrp --kernel
fi
if $secureboot
then
    require "$SBMAN" --secureboot
fi
if $efi
then
    require mountpoint --efi
    require mount --efi
    require umount --efi
    require sed --efi
    require blkid --efi
    require efibootmgr --efi
    require tail --efi
    $backup && require mv --efi
    require cp --efi
    [[ "${EFIKERNEL:0:1}" == "/" ]] || die "\$EFIKERNEL must be an absolute path on the EFI System partition: $EFIKERNEL"
fi
if $modules
then
    require grep --modules
    require emerge --modules
    require equery --modules
    [[ -x "$extract_module_sig_script" ]] || die "missing required script $extract_module_sig_script for --modules"
    require sed --modules
    require xxd --modules
    require openssl --modules
    require_openssl asn1parse --modules
    require_openssl rsautl --modules
    require sha512sum --modules
    require cut --modules
fi
if $nvidia
then
    require_package x11-drivers/nvidia-drivers --nvidia driver kms
fi


# Detect kernel local version
localver="$(sed -n -e 's/^CONFIG_LOCALVERSION="-\?\(.*\)"$/\1/p' "$KERNELCONF")" || die "failed to read kernel local version from configuration file: $KERNELCONF"
: "${KERNELVER:=$localver}"
[[ "$KERNELVER" == "$localver" ]] || die "kernel local version mismatch: KERNELVER=\"$KERNELVER\" but CONFIG_LOCALVERSION=\"$localver\""

# Build directory
namever="$KERNELNAME${KERNELVER:+-$KERNELVER}"
builddir="$KERNELDIR/build-$namever"



## First kernel pass: build the kernel itself
if $kernel
then
    # Ok, let's get paranoid about permissions now. The kernel build below will generate the kernel's signing key for modules, and we don't want these to be world-readable -- or even portage-readable.
    umask="$(umask)"
    echo
    echo "kernel lockdown:"
    verbosedo "kernel lockdown failed" umask 0027
    verbosedo "kernel lockdown failed" chmod 700 "${KERNELDIR%/}/"                  # trailing / is important to chgrp the actual directory and not the symlink (in the KERNELDIR=/usr/src/linux case)
    echo

    # Create the build directory as genkernel fails without it
    mkdir -p "$builddir" || die "build directory creation failed"

    # Build the kernel, with genkernel from sys-kernel/genkernel:
    # * display what's going on (--loglevel)
    # * don't install yet, we need to embed the initramfs (--no-install)
    # * save the config in /etc/kernels (--save-config)
    # * assume the config is fine (--no-oldconfig)
    # * clean up everything (--mrproper --clean)
    # * kernel directory and configuration from the environment (--kerneldir --kernel-config)
    # * separate kernel build directory (--kernel-outputdir)
    # * custom kernel name (--kernname)
    # * build fast (--makeopts)
    # * initramfs components (--keymap --busybox --luks --btrfs), still passed to stage 1 for kernel config checks
    genkernel ${GK_LOGLEVEL:+--loglevel="$GK_LOGLEVEL"} --no-install --save-config --no-oldconfig --mrproper --clean --kerneldir="$KERNELDIR" --kernel-config="$KERNELCONF" --kernel-outputdir="$builddir" --kernname="$KERNELNAME" --makeopts="-j8 -l9" --keymap --busybox --luks --btrfs kernel || die "kernel build failed"

    # Fine, now let's loosen the restrictions a bit so that portage can still build external modules -- but keep the keys locked
    echo
    echo "kernel partial unlock:"
    verbosedo "kernel unlock failed" chgrp -R portage "${KERNELDIR%/}/"             # trailing / is important to chgrp the actual directory and not the symlink (in the KERNELDIR=/usr/src/linux case)
    verbosedo "kernel unlock failed" chgrp root "$builddir"/certs/signing_key.*
    verbosedo "kernel unlock failed" chmod 600 "$builddir"/certs/signing_key.*
    verbosedo "kernel unlock failed" chmod 750 "${KERNELDIR%/}/"                    # trailing / is important to chgrp the actual directory and not the symlink (in the KERNELDIR=/usr/src/linux case)
    verbosedo "kernel unlock failed" umask "$umask"
fi


# Get the version number
kernelversionfile="$builddir/include/config/kernel.release"
kernelversion="$(<"$kernelversionfile")" 2>/dev/null || die "read kernel version from $kernelversionfile failed"
kernelfile="/boot/kernel-$KERNELNAME-$(uname -m)-$kernelversion"


## Build external modules (before building the initramfs, because we may want to include some)
if $modules
then
    echo
    echo
    # Find out whether we're building a PaX kernel and adjust USE flags accordingly
    export USE=-pax_kernel
    grep -q '^CONFIG_PAX=y$' "$KERNELCONF" && USE=pax_kernel
    # Don't build the nVidia drivers if building a Nouveau kernel
    excludes=()
    $nvidia || excludes+=(--exclude x11-drivers/nvidia-drivers)
    # Emerge external modules
    # (the linux-mod/linux-info eclasses need KERNEL_DIR/KBUILD_OUTPUT to use the right kernel and build directory)
    KERNEL_DIR="$KERNELDIR" KBUILD_OUTPUT="$builddir" verbosedo "module rebuild failed" emerge --quiet-build y --keep-going "${excludes[@]}" "${EMERGEOPTS[@]}" @module-rebuild || die "emerge modules failed"

    # Sign the modules
    echo
    echo
    echo "Signing modules:"
    count=0
    for module in $(equery f $(equery b "/lib/modules/$kernelversion") | grep '^/lib/modules/'"${kernelversion//./\\.}"'/.*\.ko$')
    do
        (( count++ ))
        echo -n "$module "
        if "$extract_module_sig_script" -d "$module" >&/dev/null
        then
            echo "ALREADY SIGNED"
        else
            "$builddir/scripts/sign-file" sha512 "$builddir/certs/signing_key.pem" "$builddir/certs/signing_key.x509" "$module" && echo OK || echo FAIL
        fi
    done
    echo "$count modules signed."
fi


## Second kernel pass: build the initramfs and integrate it into the kernel
if $kernel
then
    echo
    echo
    # Neutralize existing genkernel module groups, the kernel already has what it needs
    # (we're only using --ramdisk-modules for custom modules genkernel doesn't handle natively)
    for group in $(sed -n -e 's/^\(MODULES_[^=]*\)=.*/\1/p' /usr/share/genkernel/defaults/modules_load); do
        export "$group"=    # can still override this with AMODULES_$group
    done
    if $nvidia
    then
        # Define a new module group for genkernel to include
        export AMODULES_NVIDIA="nvidia-drm nvidia-modeset nvidia-uvm nvidia"
    fi

    # Build the initramfs (see invocation above for common arguments):
    # * don't mount /boot, the real boot filesystem is on /boot/efi (--no-mountboot)
    # * install to /boot and symlink it if backup is enabled (--install --[no-]symlink)
    # * include only necessary modules in the initramfs, but no firmware, it's a custom kernel with most required components built in (--ramdisk-modules --no-all-ramdisk-modules --no-firmware)
    # * don't compress the initramfs, but embed it into the kernel (--no-compress-initramfs --integrated-initramfs)
    genkernel ${GK_LOGLEVEL:+--loglevel="$GK_LOGLEVEL"} --no-mountboot --install $($backup && printf -- --symlink || printf -- --no-symlink) --kerneldir="$KERNELDIR" --kernel-config="$KERNELCONF" --kernel-outputdir="$builddir" --kernname="$KERNELNAME" --makeopts="-j8 -l9" --ramdisk-modules --no-all-ramdisk-modules --no-firmware --keymap --busybox --luks --btrfs --no-compress-initramfs --integrated-initramfs initramfs || die "kernel build failed"
fi


## Sign for SecureBoot
## TODO: is it possible to sign the kernel even earlier, in a more locked-down directory?
if $secureboot
then
    echo
    "$SBMAN" sign "$kernelfile" || die "kernel signing failed"
fi


# Get the embedded command line
kernelcmdline="$(sed -n -e 's/^CONFIG_CMDLINE="\(.*\)"$/\1/p' "$builddir/.config")"


## Install to EFI
if $efi
then
    echo

    # Get information on the EFI system partition
    # Remember: partition number != minor number
    if ! mountpoint -q "$EFIPART"
    then
        mount "$EFIPART" || die "failed to mount EFI System partition at $EFIPART"
        efipart_mounted=true
        echo "Mounted EFI System partition: $EFIPART"
    fi
    efinode="$(mountpoint -d "$EFIPART")" || die "failed to mount EFI System partition at $EFIPART"
    IFS=: read -r efimajor efiminor <<<"$efinode" || die "failed to get EFI System partition major/minor numbers"
    [[ -d /sys/dev/block/"$efinode" ]] || die "EFI System partition is not a block device"
    efidisk=/dev/"$(sed -n -e 's/^DEVNAME=//p' /sys/dev/block/"$efimajor":0/uevent)"
    efidiskpart=/dev/"$(sed -n -e 's/^DEVNAME=//p' /sys/dev/block/"$efinode"/uevent)"
    efidiskpartno="${efidiskpart#$efidisk}"     # try to derive part number from part device
    efidiskpartno="${efidiskpartno#p}"          # some devices (e.g., NVMe devices) have a 'p' before the part number
    efiuuid="$(blkid -s PARTUUID -o value "$efidiskpart")"
    [[ -n "$efiuuid" ]] || die "failed to get EFI System partition PARTUUID" 
    efipath="${EFIPART}${EFIKERNEL}"
    [[ -n "$EFIOLDKERNEL" ]] && efioldpath="${EFIPART}${EFIOLDKERNEL}"

    # Ensure the EFI variables filesystem is mounted read-write
    IFS=, read -a efivarfsopts <<<"$(mount | sed -n -e 's/^'"$EFIVARFS"' on [^ ]\+ type efivarfs (\([^)]\+\))$/\1/p')"
    (( ${#efivarfsopts[@]} != 0 )) || die "EFI variables filesystem not mounted as $EFIVARFS"
    efivarfs_access=
    for opt in "${efivarfsopts[@]}"
    do
        case "$opt" in
            ro|rw) efivarfs_access="$opt" ;;
        esac
    done
    case "$efivarfs_access" in
        ro) mount -o remount,rw "$EFIVARFS" || die "failed to remount EFI variables filesystem read-write: $EFIVARFS"
            echo "Remounted EFI variables filesystem read-write: $EFIVARFS"
            ;;
        rw) ;;
        *) die "can't determine access mode (ro/rw) for EFI variables filesystem: $EFIVARFS" ;;
    esac

    # Set up an EFI boot entry
    echo
    echo "Setting up EFI boot entry:"
    regex='s/^Boot\([0-9a-fA-F]\{4\}\)\(\*\?\)[[:space:]]\+\(.*\)[[:space:]]\+HD(\([^)]\+\))\/File(\([^)]\+\)).*/\1 a:\2 \4 \5 \3/p'    # regex rundown: "Boot" + 4-digit hex number + "*" if active + label + "HD(" + hd info + ")/File(" + path + ")"
    badlabel=()
    inactive=()
    valid=()
    while read -r bootnum active hd file label
    do
        # Check UUID and path
        IFS=, read -r dummy dummy uuid dummy dummy <<<"$hd"
        if [[ "$uuid" == "$efiuuid" ]]; then
            [[ "$file" == "${EFIKERNEL//\//\\}" ]] || continue
            echo "  * ${bootnum}${active#a:}: \"$label\" HD($hd)/File($file)"
            # Check label
            [[ "$label" == "$EFILABEL" ]] || { badlabel+=("$bootnum"); continue; }
            # Check active
            [[ "$active" == "a:*" ]] && valid+=("$bootnum") || inactive+=("$bootnum")
        else
            # Bad UUID, but let's still check the label
            [[ "$label" == "$EFILABEL" ]] && echo "Warning: found EFI boot entry $bootnum with matching label but different partition!" >&2
        fi
    done <<<"$(efibootmgr -v | sed -n -e "$regex")"
    if (( ${#valid[*]} > 1 ))
    then
        # It must be okay
        echo "Found multiple valid EFI boot entries: ${valid[*]}"
    elif (( ${#valid[*]} == 1 ))
    then
        # Neat
        echo "Found valid EFI boot entry: ${valid[*]}"
    elif (( ${#inactive[*]} >= 1 ))
    then
        # It's not great, but still okay
        echo "############################################"
        echo "# All valid EFI boot entries are *inactive*: ${inactive[*]}"
        echo "############################################"
    elif (( ${#badlabel[*]} >= 1 ))
    then
        # Uh oh, is there already something else using this path?
        die "matching EFI boot entries have *bad labels*: ${badlabel[*]}"
    else
        # Fine, let's do this
        echo "Warning: no matching EFI boot entry, creating one" >&2
        echo ">>> efibootmgr -v --create --disk $efidisk --part $efidiskpartno --loader ${EFIKERNEL//\//\\} --label $EFILABEL"
        entries="$(efibootmgr -v --create --disk "$efidisk" --part "$efidiskpartno" --loader "${EFIKERNEL//\//\\}" --label "$EFILABEL")" || die "create EFI boot entry failed"
        read -r bootnum active hd file label <<<"$(tail -n1 <<<"$entries" | sed -n -e "$regex")"
        echo "  * ${bootnum}${active#a:}: \"$label\" HD($hd)/File($file)"
    fi

    # Install the new kernel to the EFI System partition
    echo
    echo "Installing kernel to EFI System partition:"
    if $backup
    then
        if [[ -n "$efioldpath" ]]
        then
            if [[ -f "$efipath" ]]
            then
                verbosedo "backup current EFI kernel failed" mv -fT "$efipath" "$efioldpath"
            else
                skipmsg="Skipped backup of $efipath: no previous kernel at $efipath"
            fi
        else
            skipmsg="Skipped backup of $efipath: empty \$EFIOLDKERNEL"
        fi
    fi
    verbosedo "install new EFI kernel failed" cp -fLT "$kernelfile" "$efipath"
    [[ -n "$skipmsg" ]] && echo "$skipmsg"

    # Restore access mode for the EFI variables filesystem
    if [[ "$efivarfs_access" == ro ]]
    then
        efivarfs_access=
        echo
        newlined=true
        mount -o remount,ro "$EFIVARFS" || die "failed to remount EFI variables filesystem read-only: $EFIVARFS"
        echo "Remounted EFI variables filesystem read-only: $EFIVARFS"
    fi

    # Unmount the EFI system partition
    if $efipart_mounted
    then
        efipart_mounted=false
        [[ -z "$newlined" ]] && echo
        umount "$EFIPART" || die "failed to unmount EFI System partition at $EFIPART"
        echo "Unmounted EFI System partition: $EFIPART"
    fi
fi

echo
printf "New kernel built/installed successfully: ${red}$kernelfile${black}\n"
printf "Kernel command line: ${red}$kernelcmdline${black}\n"
! $nvidia && grep -qF donvidia <<<"$kernelcmdline" && echo "Warning: nVidia modules disabled, but there is a 'donvidia' parameter on the kernel command line" >&2
$nvidia && ! grep -qF donvidia <<<"$kernelcmdline" && echo "Warning: nVidia modules enabled, but there is no 'donvidia' parameter on the kernel command line" >&2
echo
