#!/bin/bash


# Build full name
[[ "${0:0:1}" == "/" ]] && full_0="$0" || full_0="$PWD/$0"

# Source required modules (bashmod first, then use it for the others)
[[ ! -r "${BASH_MODULES_SCRIPT=${full_0%/*}/../bash/functions/bashmod}" ]] && { echo "Error: This script requires the 'bashmod' module, please specify its path
       with the BASH_MODULES_SCRIPT environment variable." ; exit 255 ; }
source "$BASH_MODULES_SCRIPT"
bashmod die


# Environment variables
: "${KERNELDIR:=/usr/src/linux}"
: "${KERNELCONF:=$KERNELDIR/.config.cobalt}"
: "${GRUBCFG:=/boot/grub/grub.cfg}"


# Display help
if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
    cat <<- _EOF_
	  Usage: ${0##*/} [options]
	
	Generates a kernel and its initramfs with LVM, framebuffer and splash
	support. Also strips the initramfs from unneeded stuff (modules and HW
	detection logic).
	
	The kernel is configured and built in \$KERNELDIR (default "/usr/src/linux"):
	    $KERNELDIR
	using configuration \$KERNELCONF (default "\$KERNELDIR/.config.cobalt"):
	    $KERNELCONF
	The Grub configuration file is \$GRUBCFG (default "/boot/grub/grub.cfg"):
	    $GRUBCFG
	
	Options:
	    -m | --no-emerge    don't emerge @module-rebuild
	    -u | --uvesafb      perform additional steps (add v86d
	                        to initramfs) for uvesafb
	_EOF_
    exit
fi

# Process options
getopt -T &> /dev/null
(( $? != 4 )) && die -r128 "your getopt version is too old, get the enhanced getopt from util-linux!"
getopt="$(getopt -n "${0##*/}" -l no-emerge -o +m -- "$@")"
(( $? != 0 )) && exit 1
eval set -- "$getopt"
emerge=true
uvesafb=false
while true ; do
    case "$1" in
        -m|--no-emerge) emerge=false ;;
        -u|--uvesafb) uvesafb=true ;;
        --) shift ; break ;;
        *) die "getopt failure" ;;
    esac
    shift
done
(( $# > 0 )) && die "unhandled arguments: $@"


# Build the kernel
genkernel --save-config --no-mrproper --clean --install --symlink --no-ramdisk-modules --no-all-ramdisk-modules --kerneldir="$KERNELDIR" --kernel-config="$KERNELCONF" --mountboot --makeopts="-j8" --no-keymap --splash="emerge-world" --splash-res="1920x1080" --lvm --no-mdadm --no-dmraid --no-luks --kernname="cobalt" --no-firmware --compress-initramfs-type="gzip" all


if (( $? == 0 )) ; then
    # Append v86d files to the initramfs for uvesafb
    if $uvesafb ; then
        echo
        echo
        initramfs="$(ls -ct -1 /boot/initramfs* | head -n 1)"    # use most recently touched initramfs
                                                                 # (yes, `ls` is bad: use [[ -nt ]] instead?)
        initdir="${0##*/}-initramfs"
        importer="${0%/*}/import-initramfs"
        if [[ -f "$initramfs" && -x "$importer" ]] ; then
            echo "Including additional files into initramfs..."
            mkdir -p "$initdir"
            pushd "$initdir"
            gunzip -c "$initramfs" | cpio -i
            popd
            "$importer" /usr/share/v86d/initramfs "$initdir"
            pushd "$initdir"
            find . -print0 | cpio -0 -o -H newc | gzip -c -9 > "$initramfs"
            popd
            rm -Rf "$initdir"
        else
            die "cannot include additional files: importer not found, or initramfs not found"
        fi
    fi


    # Configure Grub
    echo
    echo
    if [[ -f "$GRUBCFG" ]]
    then
        grub2-mkconfig -o "$GRUBCFG"
    else
        echo "Warning: cannot update Grub: '$GRUBCFG' not found" >&2
    fi
fi

# Emerge external modules
if $emerge ; then
    echo
    echo
    emerge --quiet-build y -k @module-rebuild
fi

echo
echo "Done."
echo

