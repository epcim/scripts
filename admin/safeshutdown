#!/bin/bash
# Shutdown wrapper script that ensures you really want to shutdown
# Useful when there may be people logged in remotely and you don't have
# a login manager warning you that shutting down would be rude to them


# grub-reboot alternatives
GRUBREBOOT_ALTERNATIVES="grub-reboot grub2-reboot"

# Source some useful functions
source ${0%/*}/../../bash/functions/die


# Help message
if [[ $# -eq 1 && ( "$1" == "--help" || "$1" == "-h" ) ]]
then
    echo "  Usage: ${0##*/} [options] [--] [shutdown options]

'shutdown' wrapper that ensures you really want to shutdown.
Options not handled by ${0##*/} are passed on to shutdown.
With no options, '-h now' is assumed.

Options:
  -g | --grub [ENTRY]       grub entry to boot into on next bootup
                            (obviously requires grub, and grub-reboot)
" >&2
    exit
fi


# Parse the options
GRUBENTRY=''
OPTS_DONE=''
until [[ "$OPTS_DONE" ]]
do
    case "$1" in
        "-g"|"--grub")
            GRUBENTRY="$2"
            [[ -z "$GRUBENTRY" ]] && die -r1 "empty grub entry"
            shift 2
            ;;

        "--")
            # End of options
            OPTS_DONE='true'
            shift
            ;;

        *)
            # Assume end of options (the rest of them will be passed on to shutdown)
            OPTS_DONE='true'
            ;;
    esac
done


# Print logged on users
echo -e "  \033[01;33mLogged on users:\033[00m"
w


# Shutdown if the user confirms
echo
echo -ne "\033[01;37mDo you really want to shutdown the computer? yes/no:\033[00m "
declare -u ANS
read ANS
case "$ANS" in
    YES)
        # Bail out on error
        set -e

        # Set the entry to reboot on for Grub
        if [[ -n "$GRUBENTRY" ]]
        then
            # Find grub-reboot
            PATH="$PATH:/sbin:/usr/sbin"
            for gr in $GRUBREBOOT_ALTERNATIVES
            do
                which $gr &> /dev/null && { GRUBREBOOT=$gr ; break ; }
            done
            [[ -z "$GRUBREBOOT" ]] && die -r1 "grub-reboot not found"

            # Mount the boot partition if required
            UNMOUNT_BOOT=false
            if grep -Eq '\B/boot\>' /etc/fstab
            then
                # /boot must be mounted, check if it is
                if ! grep -Eq '\B/boot\>' /etc/mtab
                then
                    # /boot is not mounted, let's mount it
                    sudo mount /boot
                    UNMOUNT_BOOT=true
                fi
            fi

            # Set the grub entry for next bootup
            sudo "$GRUBREBOOT" "$GRUBENTRY"

            # Unmount /boot it it was unmouted
            [[ "$UNMOUNT_BOOT" == "true" ]] && sudo umount /boot
        fi

        # Shutdown
        [[ $# -eq 0 ]] && OPTS="-h now"
        sudo shutdown ${OPTS:-"$@"}
        ;;

    NO)
        ;;

    *)
        echo "This doesn't make any sense."
        exit 1
        ;;
esac

