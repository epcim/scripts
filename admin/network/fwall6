#!/bin/bash

## http://www.ibm.com/developerworks/edu/l-dw-linuxfw-i.html

# Our complete stateful firewall script. This firewall can be customized for a
# laptop, workstation, router or even a server. :)

# All your network interfaces, including lo.
#interfaces=(lo eth0 wlan0)
interfaces=(lo enp4s0 wlp0s29u1u8)

# The interfaces that provides your "uplink".
#uplink=(eth0 wlan0)
uplink=(enp4s0 wlp0s29u1u8)

# The local (ie., trusted) interfaces.
local_interfaces=(lo)

# Change this line so that it lists the assigned numbers or symbolic names
# (from /etc/services) of all the services that you'd like to provide to the
# general public. If you don't want any services enabled, set it to ().
services_tcp=()
services_udp=()

# Our default INPUT policy: DROP.
default_input_policy=DROP


function start_fw6() {
    echo -n "Starting IPv6 firewall... "

    local has_ssh_22=false

    # Input table default policy.
    ip6tables -P INPUT "$default_input_policy"

    # Accept local (trusted) traffic.
    for i in "${local_interfaces[@]}"
    do
        ip6tables -A INPUT -i "$i" -j ACCEPT
    done

    # Accept ESTABLISHED or RELATED connections.
    ip6tables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # Enable public access to global services.
    for s in "${services_tcp[@]}"
    do
        ip6tables -A INPUT -p tcp --dport "$s" -m conntrack --ctstate NEW -j LOG --log-prefix "[ip6tables] $s TCP svc:"
        ip6tables -A INPUT -p tcp --dport "$s" -m conntrack --ctstate NEW -j ACCEPT
        # Check whether ssh is part of our service set
        [[ "$s" == "ssh" ]] && has_ssh_22=true
    done
    for s in "${lan_services_udp[@]}"
    do
        ip6tables -A INPUT -p udp --dport "$s" -m conntrack --ctstate NEW -j LOG --log-prefix "[ip6tables] $s UDP svc:"
        ip6tables -A INPUT -p udp --dport "$s" -m conntrack --ctstate NEW -j ACCEPT
    done

    # Log and reject attempts at SSH connection on port 22 separately.
    if ! $has_ssh_22
    then
        ip6tables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -j LOG --log-prefix "[ip6tables] ssh22fail:"
        ip6tables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -j "$default_input_policy"
    fi

    # Other rejected attempts.
    ip6tables -A INPUT -p tcp -j LOG --log-prefix "[ip6tables] bad TCP:"
    ip6tables -A INPUT -p udp -j LOG --log-prefix "[ip6tables] bad UDP:"
    ip6tables -A INPUT -p tcp -j "$default_input_policy"
    ip6tables -A INPUT -p udp -j "$default_input_policy"

    # Accept ICMPv6 packets, which are required for MAC address resolution.
    ip6tables -A INPUT -p icmpv6 -j ACCEPT

    # Only non-UDP/TCP eth0 traffic might end up here: low-level traffic.
    ip6tables -A INPUT -j LOG --log-prefix "[ip6tables] bad other:"

    # Output table default policy: ACCEPT.
    ip6tables -P OUTPUT ACCEPT

    echo "done"
}

function stop_fw6() {
    echo -n "Stopping IPv6 firewall... "

    ip6tables -F INPUT
    ip6tables -P INPUT ACCEPT
    ip6tables -F OUTPUT
    ip6tables -P OUTPUT ACCEPT

    echo "done"
}

if [ "$1" = "start" ]
then
    start_fw6
elif [ "$1" = "stop" ]
then
    stop_fw6
elif [ "$1" = "restart" ]
then
    stop_fw6
    start_fw6
else
    echo "Syntax: ${0##*/} <start|stop|restart>"
fi

