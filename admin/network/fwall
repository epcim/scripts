#!/bin/bash

## http://www.ibm.com/developerworks/edu/l-dw-linuxfw-i.html

# Our complete stateful firewall script.  This firewall can be customized for
# a laptop, workstation, router or even a server. :)

# All your network interfaces, including lo.
INTERFACES="lo eth0 wlan0"

# The interfaces that provides your "uplink".
UPLINK="eth0 wlan0"

# The local (ie., trusted) interfaces.
LOCAL="lo"

# Local network address range (with mask).
LAN="192.168.1.0/24"

# Change this line so that it lists the assigned numbers or symbolic names (from
# /etc/services) of all the services that you'd like to provide to the general
# public.  If you don't want any services enabled, set it to "".
SERVICES_TCP=""
SERVICES_UDP=""
LAN_SERVICES_TCP="ssh"
LAN_SERVICES_UDP=""


function start_fw
{
    echo -n "Starting IPv4 firewall... "

    # Input table default policy : DROP.
    iptables -P INPUT DROP

    # Accept local (trusted) traffic.
    for x in ${LOCAL}
    do
        iptables -A INPUT -i ${x} -j ACCEPT
    done

    # Accept ESTABLISHED or RELATED connections.
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # Enable public access to global services.
    for x in ${SERVICES_TCP}
    do
        iptables -A INPUT -p tcp --dport ${x} -m conntrack --ctstate NEW -j LOG --log-prefix "[iptables] TCP service:"
        iptables -A INPUT -p tcp --dport ${x} -m conntrack --ctstate NEW -j ACCEPT
    done
    for x in ${SERVICES_UDP}
    do
        iptables -A INPUT -p udp --dport ${x} -m conntrack --ctstate NEW -j LOG --log-prefix "[iptables] UDP service:"
        iptables -A INPUT -p udp --dport ${x} -m conntrack --ctstate NEW -j ACCEPT
    done

    # Enable LAN access to LAN services.
    for x in ${LAN_SERVICES_TCP}
    do
        iptables -A INPUT -p tcp --dport ${x} -m conntrack --ctstate NEW -s ${LAN} -j LOG --log-prefix "[iptables] TCP lan-service:"
        iptables -A INPUT -p tcp --dport ${x} -m conntrack --ctstate NEW -s ${LAN} -j ACCEPT
    done
    for x in ${LAN_SERVICES_UDP}
    do
        iptables -A INPUT -p udp --dport ${x} -m conntrack --ctstate NEW -s ${LAN} -j LOG --log-prefix "[iptables] UDP lan-service:"
        iptables -A INPUT -p udp --dport ${x} -m conntrack --ctstate NEW -s ${LAN} -j ACCEPT
    done

    # Log and reject attempts at SSH connection on port 22 separately.
    iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -j LOG --log-prefix "[iptables] ssh22fail:"
    iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -j DROP

    # Other rejected attempts.
    iptables -A INPUT -p tcp -j LOG --log-prefix "[iptables] bad TCP:"
    iptables -A INPUT -p udp -j LOG --log-prefix "[iptables] bad UDP:"
    iptables -A INPUT -p tcp -j DROP
    iptables -A INPUT -p udp -j DROP

    # Only non-UDP/TCP eth0/wlan0 traffic might end up here: low-level traffic.
    iptables -A INPUT -j LOG --log-prefix "[iptables] bad other:"

    # Output table default policy: ACCEPT.
    iptables -P OUTPUT ACCEPT

    # Disable spoofing on all interfaces.
    for x in ${INTERFACES}
    do
        echo 1 > /proc/sys/net/ipv4/conf/${x}/rp_filter
    done

    echo "done"
}

function stop_fw
{
    echo -n "Stopping IPv4 firewall... "

    iptables -F INPUT
    iptables -P INPUT ACCEPT
    iptables -F OUTPUT
    iptables -P OUTPUT ACCEPT

    echo "done"
}

if [ "$1" = "start" ]
then
    start_fw
elif [ "$1" = "stop" ]
then
    stop_fw
elif [ "$1" = "restart" ]
then
    stop_fw
    start_fw
else
    echo "SYNTAX: ${0##*/} <start|stop|restart>"
fi

exit 0
