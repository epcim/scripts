#!/usr/bin/env tclsh8.6
#############################################################################
#   puse/pkey/plic                                                          #
#                                                                           #
# Script for management of Gentoo Portage flag files.                       #
# Respectful of file layout (category blocks, comments, blanks, ...).       #
# Handles:                                                                  #
#   * USE flags in package.use when called as 'puse'                        #
#   * keywords in package.accept_keywords when called as 'pkey'             #
#   * licenses in package.license when called as 'plic'                     #
#                                                                           #
# Atoms are parsed as per PMS EAPI 5, as DEPEND atoms.                      #
#                                                                           #
# History:                                                                  #
#   v0.2    Diversification: handle keywords and licenses                   #
#   v0.1    Initial version: handle USE flags only                          #
#############################################################################


#############################################################################
#############################################################################
#
# Packages
#
#############################################################################
#############################################################################

package require Tcl 8.6

lappend auto_path [file normalize [file join [file dirname $::argv0] ../../tcl]]

package require debug
package require lwutils
package require getopt

namespace import ::lwutils::die ::lwutils::lremove


#############################################################################
#############################################################################
#
# Globals
#
#############################################################################
#############################################################################

# Version number
set version "0.2"

# Operating mode (set by [SetupMode])
set mode ""

# Flag description (used in messages ; set by [SetupMode])
set flagdesc ""
# Flagspec status regexp
set flagspecstatusrx {[?%+-]}
# Flagspec regexp capturing status (+-%?) and flag (set by [SetupMode])
set flagspecrx ""
# Flag status regexp
set flagstatusrx {[+-]}

# Comment for the line
set comment ""
# Boolean holding whether a comment has been passed with --comment
set commentset false

# Path to file (set by [SetupMode])
set path ""

# Verbosity level
set verbose 0

# Resulting flags
set flags ""
# Flag query results
set query ""
# Boolean holding whether only queries were done (no set/unset/reset)
set queryonly true

# DEPEND atom regexps (see PMS EAPI 5 and ebuild(5) for specification)
set constraint_rx   {(?:<|<=|=|>=|>|~)}
set category_rx     {(?:[a-zA-Z0-9_][a-zA-Z0-9_+.-]*)}
set package_rx      {(?:[a-zA-Z0-9_][a-zA-Z0-9_+]*(?:-(?:[a-zA-Z0-9_+]*-)*[a-zA-Z_+]*)?)}
set version_rx      {(?:[0-9]+(?:\.[0-9]+)*[a-z]?(?:_(?:alpha|beta|pre|rc|p)[0-9]*)?)}
set revision_rx     {(?:r[0-9]+)}
set slot_rx         {(?::(?:[0-9]|[0-9][0-9.]*[0-9]))}
set postfix_rx      {(?:\*)}
set use_rx          {(?:[a-zA-Z0-9][a-zA-Z0-9@_+-]*)}
set keyword_rx      {(?:~?[a-zA-Z0-9_][a-zA-Z0-9_-]*)}
set license_rx      {(?:[[:graph:]]+)}


#############################################################################
#############################################################################
#
# Procedures
#
#############################################################################
#############################################################################

#############################################################################
# Setup the script variables according to the given operating mode.
# If the mode name is not valid, the default 'use' mode will be selected.
#
# Arguments:
#   m           user operating mode (possibly invalid)
#
# Globals:
#   mode                selected operating mode
#   flagdesc            flag description
#   flagspecstatusrx    flagspec status regexp
#   flagspecrx          flagspec regexp
#   path                path to the default target file of the mode
#   use_rx              USE flag regexp
#   keyword_rx          keyword regexp
#   license_rx          license regexp
#
# Variables: NONE
#
# Return:
#   boolean indicating whether the given mode name was valid
#############################################################################
proc SetupMode {m} {
    global mode
    global flagdesc
    global flagspecstatusrx
    global flagspecrx
    global path
    global use_rx
    global keyword_rx
    global license_rx

    # Switch according to the given mode, defaulting to "use" mode
    switch $m {
        "key" {
            # Remember the operating mode
            set mode "key"
            # Setup variables
            set path "/etc/portage/package.accept_keywords"
            set flagdesc "keyword"
            set flagspecrx "^(${flagspecstatusrx}?)(${keyword_rx})\$"
        }

        "lic" {
            # Remember the operating mode
            set mode "lic"
            # Setup variables
            set path "/etc/portage/package.license"
            set flagdesc "license"
            set flagspecrx "^(${flagspecstatusrx}?)(${license_rx})\$"
        }

        "use" -
        default {
            # Remember the operating mode
            set mode "use"
            # Setup variables
            set path "/etc/portage/package.use"
            set flagdesc "USE flag"
            set flagspecrx "^(${flagspecstatusrx}?)(${use_rx})\$"
        }
    }

    # Return whether the given mode name was valid
    return [expr {$mode ne $m}]
}

#############################################################################
# Break down an atom and return some parts of it.
#
# Available parts are:
#   constraint      return the atom's constraint
#   category        return the atom's category
#   name            return the atom's name
#   version         return the atom's version
#   revision        return the atom's revision
#   slot            return the atom's slot
#   postfix         return the atom's postfix
#   basecat         return the atom's base category
#   subcat          return the atom's sub-category
#   basename        return the atom's base name (category + name)
#   package         return the atom's package name (base name + version)
#   fullver         return the atom's full version (version + revision)
#   fullpack        return the atom's full package name (package + revision)
#   *               special value that returns all parts
#                   (same order as above; most useful with --dict)
#
# Available options:
#   -d|--dict       return the parts as a dict instead of a list
#
# Arguments:
#   options         options (see above; optional)
#   parts           a list of parts to return (see above)
#   atom            atom to break down
#
# Globals:
#   constraint_rx   constraint regexp
#   category_rx     category regexp
#   package_rx      package regexp
#   version_rx      version regexp
#   revision_rx     revision regexp
#   slot_rx         slot regexp
#   postfix_rx      postfix regexp
#
# Variables: NONE
#
# Return:
#   the specified atom parts
#############################################################################
proc Atom {args} {
    global constraint_rx
    global category_rx
    global package_rx
    global version_rx
    global revision_rx
    global slot_rx
    global postfix_rx

    # Define a function for appending to the return list
    proc _atom_part_append {var key value} {
        upvar $var list
        lappend list $value
    }

    # Parse the arguments
    set rargs {}
    getopt flag arg $args {
        -d - --dict {
            # Return a dict instead of a list: redefine the _atom_part_append function
            proc _atom_part_append {var key value} {
                upvar $var dict
                dict set dict $key $value
            }
        }
        missing {
            return -code error "option requires argument: $arg"
        }
        unknown {
            return -code error "unknown or ambiguous option: $arg"
        }
        arglist {
            set rargs $arg
        }
    }
    # Get the parts and atom
    lassign $rargs parts atom
    # No parts and/or atom specified, bail out
    if {![llength $parts] || $atom eq ""} {
        return -code error "missing parts and/or atom"
    }

    # Split the atom
    if {![regexp -- "^(${constraint_rx})?(((${category_rx})/(${package_rx}))(?:-((${version_rx})(?:-(${revision_rx}))?))?)(${slot_rx})?(${postfix_rx})?\$" $atom -> constraint fullpack basename category name fullver version revision slot postfix]} {
        # Atom does not match regexp, bail out
        return -code error "invalid atom: $atom"
    }

    # Expand '*' in the list of parts into a list of all parts
    if {$parts eq "*"} {
        set parts {constraint category name version revision postfix basecat subcat basename package fullver fullpack}
    }

    # Build the return list/dict
    set ret {}
    foreach p $parts {
        switch $p {
            constraint -
            category -
            name -
            version -
            revision -
            slot -
            postfix -
            basename -
            fullver -
            fullpack {
                # Directly use the value extracted from the regexp
                _atom_part_append ret $p [set $p]
            }

            basecat {
                # Split the category around - and return the 1st part
                _atom_part_append ret $p [lindex [split $category -] 0]
            }

            subcat {
                # Split the category around - and return the 2nd part
                _atom_part_append ret $p [lindex [split $category -] 1]
            }

            package {
                # Strip the revision field from the end of the full package name
                set offset 0
                if {$revision ne ""} {
                    # Remove as much chars as the length of the revision field + 1 for the preceding dash
                    set offset [expr {[string length $revision]+1}]
                }
                _atom_part_append ret $p [string range $fullpack 0 end-$offset]
            }

            default {
                # Unknown part, bail out
                return -code error "unknown part: $p"
            }
        }
    }

    # Remove the append proc
    rename _atom_part_append {}

    # Return the list/dict
    return $ret
}

#############################################################################
# Parse a flagspec and return the status and flag name.
#
# Arguments:
#   flagspec    flagspec to parse
#   statusVar   status variable
#   flagVar     flag variable
#
# Globals:
#   flagspecrx  flagspec regexp
#
# Variables: NONE
#
# Return:
#   boolean indicating success or failure of parse
#############################################################################
proc ParseFlagspec {flagspec statusVar flagVar} {
    global flagspecrx
    upvar 1 $statusVar status $flagVar flag

    # Parse the flagspec according to the mode's regexp and return the result
    return [regexp -- $flagspecrx $flagspec -> status flag]
}

#############################################################################
# Update a list of flags according to a list of flagspecs.
# The list is also sorted and duplicates are removed (except for the last
# occurence).
#
# Arguments:
#   flags       list of flags
#   flagspecs   list of flagspecs
#
# Globals:
#   flagstatusrx    flag status regexp
#   query           holds the result of query flagspecs
#   queryonly       holds whether only queries were done on the flags
#
# Variables: NONE
#
# Return:
#   updated list of flags
#############################################################################
proc UpdateFlags {flags flagspecs} {
    global flagstatusrx query queryonly

    # Augment the flags list with the flag names, for sorting and searching
    set flags [lmap f $flags {
        ParseFlagspec $f a n
        list $n $f
    }]
    # Sort the flags and remove duplicates
    set flags [lsort -dictionary -index 0 -unique $flags]

    # Process each flagspec
    foreach spec $flagspecs {
        # Process special flagspecs
        switch -- $spec {
            "%%" {
                # Reset all flags
                set flags {}
                # By the way, now we're not just querying
                set queryonly false
                # Carry on
                continue
            }

            "??" {
                # Add all flags to the query
                lappend query [lmap f $flags {
                    lindex $f 1
                }]
                # Carry on
                continue
            }
        }

        # Parse the flagspec
        if {![ParseFlagspec $spec action flag]} {
            die "wrong format for flag: $spec" 2
        }
        # Search for the insertion/replacement position for the flag
        set iflag [lsearch -bisect -index 0 $flags $flag]
        # Check whether the flag is present at this position
        set present [expr {$flag eq [lindex $flags $iflag 0]}]

        # Process the flag according to its action
        switch -- $action {
            + - "" -
            - {
                ## Set/Unset the flag
                # Modify the action not to add a +
                set action [expr {$action eq "+" ? "" : $action}]
                # Prepare the list item to replace/insert
                set item [list $flag $action$flag]
                # Insert/replace the flag
                if {$present} {
                    # Replace the flag
                    lset flags $iflag $item
                } else {
                    # Increment the index (bisect returns the previous index)
                    incr iflag
                    # Insert the flag
                    set flags [linsert $flags $iflag $item]
                }
                # By the way, now we're not just querying
                set queryonly false
            }

            % {
                ## Reset the flag
                # Remove the flag
                if {$present} {
                    set flags [lremove $flags $iflag]
                }
                # By the way, now we're not just querying
                set queryonly false
            }

            ? {
                ## Query the flag
                # Append the state of the flag to the query results
                if {$present} {
                    lappend query [lindex $flags $iflag 1]
                } else {
                    lappend query %$flag
                }
            }
        }
    }

    # Un-augment the flags
    set flags [lmap f $flags {
        lindex $f 1
    }]
    # Return the updated flags
    return $flags
}

#############################################################################
# Parse an atom line.
#
# NB: This does not check the validity of the atom.
#
# Arguments:
#   line            atom line to parse
#   atomVar         name of the variable to hold the atom
#   flagAlignVar    name of the variable to hold the column index for flags
#   flagsVar        name of the variable to hold the flags
#   commentVar      name of the variable to hold the line's ending comment
#   comAlignVar     name of the variable to hold the column index for the
#                   comment
#
# Globals: NONE
#
# Variables: NONE
#
# Return:
#   boolean indicating success or failure of parse
#############################################################################
proc ParsePackageLine {line atomVar flagAlignVar flagsVar commentVar comAlignVar} {
    upvar 1 $atomVar atom $flagAlignVar flagAlign $flagsVar flags $commentVar comment $comAlignVar comAlign
    # Parse the package line, fill in the variables and return the result
    set success [regexp -- {^(([^#[:space:]]+)\s+)((?:[^#[:space:]]+\s*)*)(?:\# ?(.*))?$} $line -> flagAlign atom flags comment]
    set flagAlign [string length $flagAlign]
    set flags [lassign $flags]
    set comAlign [string first # $line]
    return $success
}

#############################################################################
# Choose an alignment value from a list of candidates. If no candidate is
# available or if none is fitting, compute an alignment as a multiple of n.
#
# Arguments:
#   base            base length after which to align
#   candidates      list of alignment candidates
#   stride          alignment stride (default: 4)
#
# Globals: NONE
#
# Variables: NONE
#
# Return:
#   alignment value (chosen from candidates or computed)
#############################################################################
proc ChooseAlignment {base candidates {stride 4}} {
    set align ""

    # Choose an alignment value amongst the candidates
    if {[llength $candidates]} {
        # Sort the candidates
        set candidates [lsort -integer -increasing -unique $candidates]
        # Look for the lowest fitting candidate
        set index [lsearch -integer -bisect $candidates [expr {$base+1}]]
        set align [lindex $candidates [expr {$index+1}]]
    }

    # No alignment selected, compute one as a multiple of the stride
    if {$align eq ""} {
        set align [expr {$base + $stride - ($base % $stride)}]
    }

    return $align
}


#############################################################################
#############################################################################
#
# Body
#
#############################################################################
#############################################################################

# Detect the operating mode based on the script name
if {[SetupMode [string tolower [string range [info script -bare] 1 end]]]} {
    # Invalid mode: warn the user
    puts stderr "Warning: cannot determine operating mode from script name, defaulting to 'use'"
}

# Process command line arguments
set args {}
getopt flag arg $argv {
    -m: - --mode: {
        # Select the given mode
        if {[SetupMode $arg]} {
            # Invalid mode: bail out
            die "invalid mode: $arg" 2
        }
    }
    -f: - --file: {
        # Define a custom path
        set path $arg
    }
    -c: - --comment: {
        # Define the line's new comment
        set comment $arg
        set commentset true
    }
    -v - --verbose {
        # Increase the verbosity level
        incr verbose
    }
    -h? - --help {
        # Print the help
        puts "  Usage: [info script -bare] \[options\] <atom> <$flagdesc>

Add or remove package-specific ${flagdesc}s.

Options:
  -m | --mode <mode>            operating mode ('use', 'key' or 'lic')
  -f | --file <file>            use <file> instead of the default
                                $path
  -c | --comment <comment>      add <comment> at the end of the line;
                                {} in <comment> gets replaced with the
                                line's previous comment, if any
  -v | --verbose                print the resulting ${flagdesc}s
  -h | --help                   print the help
  -V | --version                print the script version

${flagdesc}s can take the following form:
  [string pad "+$mode | $mode" 21] set the $flagdesc
  [string pad "-$mode" 21] unset the $flagdesc
  [string pad "%$mode" 21] reset the $flagdesc
  [string pad "%%" 21] reset all ${flagdesc}s
  [string pad "?$mode" 21] query the $flagdesc
  [string pad "??" 21] query all ${flagdesc}s
"
        # TODO: --align     to align all flags in all blocks
        # TODO: --pretend   don't do any changes ; with --verbose, print what would be done
        # TODO: --sort      just sort the file
        # TODO: --prune     remove old versions of packages from the file
        # TODO: multiple --verbose switches increase the level of verbosity
        exit 0
    }
    -V - --version {
        # Report the version of the program
        puts "[info script -bare] version $version"
        exit 0
    }
    missing {
        die "option requires argument: $arg" 2
    }
    unknown {
        die "unknown or ambiguous option: $arg" 2
    }
    arglist {
        set args $arg
    }
}
# Get the atom and flags
set flagspecs [lassign $args atom]
# No atom and/or flag specified, bail out
if {$atom eq "" || ![llength $flagspecs]} {
    die "missing atom and/or ${flagdesc}s" 2
}
# Check and parse the atom
try {
    set atomdict [Atom --dict * $atom]
} on error {} {die "atom seems invalid: $atom" 2}

# Read in the file
try {
    set fd [open $path r]
    set file [split [read -nonewline $fd] \n]
    close $fd
} on error {} {die "unable to read file $path" 1}

# Search for the atom
set iline [lsearch -all -regexp $file "^[string escape $atom]\\s"]
# Search for the atom's category block
set block [lsearch -all -inline -regexp $file "^${constraint_rx}?[string escape [dict get $atomdict basecat]]\[/-\]?"]
# Extract the alignments used in this block
set blockFlagAlign {}
set blockComAlign {}
foreach l $block {
    # Parse each block line
    if {![ParsePackageLine $l - fa - - ca]} {
        puts stderr "Warning: malformed package line:"
        puts stderr "         $l"
    } else {
        # Extract the flags/comments alignments
        if {$fa >= 0} {
            lappend blockFlagAlign $fa
        }
        if {$ca >= 0} {
            lappend blockComAlign $ca
        }
    }
}

# Sanity check: only 1 atom in the file
if {[llength $iline] > 1} {
    die "more than 1 line match this atom" 1
} elseif {$iline eq ""} {
    # Else if atom not found: add it
    # Prepare the flags
    set flags [UpdateFlags {} $flagspecs]
    # Check that there are flags to write indeed
    if {[llength $flags]} {
        # Insert the atom in its existing category block, if any
        if {$block ne ""} {
            # Augment each line with its constraint-less atom, for sorting and searching
            set block [lmap l $block {
                list [join [Atom {fullpack postfix} [lindex $l 0]] {}] $l
            }]
            # Sort according to the constraint-less atom
            set block [lsort -dictionary -index 0 $block]
            # Find the line that would be preceding the atom inside the block
            set neighbor [lindex [lsearch -bisect -index 0 -inline $block [join [Atom {fullpack postfix} $atom] {}]] 1]
            if {$neighbor ne ""} {
                # Get the index for the next line in the file
                set insert [expr [lsearch -exact $file $neighbor]+1]
            } else {
                # Doesn't exist: atom would be the first of the block, take the current first line
                set neighbor [lindex $block 0 1]
                # Get the index for this line in the file
                set insert [lsearch -exact $file $neighbor]
            }
        } else {
            # No category block, must create one
            # Strip the file of comments and empty lines
            set allblocks [lsearch -all -inline -not -regexp $file {^\s*(?:#.*)?$}]
            # Augment each line with its base category, for sorting and searching
            set allblocks [lmap l $allblocks {
                list [Atom basecat [lindex $l 0]] $l
            }]
            # Sort according to the base category
            set allblocks [lsort -dictionary -index 0 $allblocks]
            # Find the last line of the preceding category block
            set neighbor [lindex [lsearch -bisect -index 0 -inline $allblocks [dict get $atomdict basecat]] 1]
            if {$neighbor ne ""} {
                # Get the index for this line in the file
                set insert [lsearch -exact $file $neighbor]
                # Find the ending empty line for the block
                while {![string is space $neighbor]} {
                    incr insert
                    set neighbor [lindex $file $insert]
                }
            } else {
                # Doesn't exist: block would be the first of the file, take the first line of the current first block
                set neighbor [lindex $allblocks 0 1]
                # Get the index for this line in the file
                set insert [lsearch -exact $file $neighbor]
                # Find the opening empty line for the block
                while {![string is space $neighbor]} {
                    incr insert -1
                    set neighbor [lindex $file $insert]
                }
            }

            # Insert an empty line before creating the block
            set file [linsert $file $insert ""]
            incr insert
        }

        # Choose/compute flags alignment
        set flagAlign [ChooseAlignment [string length $atom] $blockFlagAlign]
        # Choose/compute comments alignment
        set comAlign [ChooseAlignment [expr {$flagAlign+[string length [join $flags]]}] $blockComAlign]

        # Build the new line
        set nline [string pad $atom $flagAlign][join $flags]
        # Append the comment, if any
        if {$commentset && $comment ne ""} {
            set nline "[string pad $nline $comAlign]# $comment"
        }

        # Insert it in the file
        set file [linsert $file $insert $nline]
    }
} else {
    # Else if atom found: update it
    # Get the current line
    set line [lindex $file $iline]
    # Parse the line
    if {![ParsePackageLine $line - flagAlign flags oldcomment comAlign]} {
        die "unable to parse current ${flagdesc}s for this atom" 1
    }

    # Update the flags
    set flags [UpdateFlags $flags $flagspecs]
    # Check whether any flags remain
    if {[llength $flags]} {
        # Rebuild the line
        set nline [string pad $atom $flagAlign][join $flags]

        # Process the comment
        if {$commentset} {
            # Insert the old comment in the new comment
            set comment [string map [list "{}" $oldcomment] $comment]
        } else {
            # Use the old comment
            set comment $oldcomment
        }
        # Add the comment
        if {$comment ne ""} {
            # Choose/compute the alignment if necessary
            if {$comAlign eq -1} {
                set comAlign [ChooseAlignment [string length $nline] $blockComAlign]
            }
            # Append the comment
            set nline "[string pad $nline $comAlign]# $comment"
        }

        # Put the new line back in the file
        lset file $iline $nline
    } else {
        # Empty flags, remove the line
        set file [lremove $file $iline]

        # If the atom was alone in its category block, the block is now gone:
        # remove one of its surrounding blank lines
        if {[llength $block] eq 1} {
            # Only remove a line if both surrounding lines are indeed blank
            if {[string is space [lindex $file $iline]] &&
                [string is space [lindex $file [expr {$iline-1}]]]} {
                set file [lremove $file $iline]
            }
        }
    }
}

# Display the query results
if {[llength $query]} {
    puts "Quer[expr {[llength $query] == 1 ? "y" : "ies"}]:
  [join $query "\n  "]"
}
# If we're being verbose, display the resulting flags
if {$verbose} {
    if {[llength $flags]} {
        puts "[string totitle ${flagdesc}s]: [join $flags]"
    } else {
        puts "No ${flagdesc}s."
    }
}

# Write back the file unless we did nothing else but query flags
if {!$queryonly} {
    try {
        set fd [open $path w]
        puts $fd [join $file \n]
        close $fd
    } on error {} {die "unable to write to file $path" 1}
}


# vim:ft=tcl
################################ End of file ################################
