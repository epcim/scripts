#!/bin/bash

# Build full name
[[ "${0:0:1}" == "/" ]] && full_0="$0" || full_0="$PWD/$0"


# Functions
die() { # *:message
    printf "Error: %s\n" "$*"
    exit 1
} >&2


# Tmpfs-related variables
if [[ ! -v PORTAGE_TMPDIR || -n "$PORTAGE_TMPDIR" ]]
then
    [[ -v PORTAGE_TMPDIR ]] || PORTAGE_TMPDIR="$(portageq envvar PORTAGE_TMPDIR)/portage" || die "portageq failed to get PORTAGE_TMPDIR"
    [[ -d "$PORTAGE_TMPDIR" ]] || die "no such directory: PORTAGE_TMPDIR: $PORTAGE_TMPDIR"
fi
: "${PORTAGE_TMPDIR_SIZE:=9G}"

# Kernel-related variables
kernelver="$(uname -r)" || die 'uname failed, perhaps export KERNEL_DIR and KBUILD_OUTPUT explicitly?'
if [[ ! -v KERNEL_DIR || -n "$KERNEL_DIR" ]]
then
    [[ -v KERNEL_DIR ]] || KERNEL_DIR="$(readlink "/lib/modules/$kernelver/source")" || die 'readlink failed to read source directory symlink from /lib/modules, perhaps export KERNEL_DIR explicitly?'
    [[ -d "$KERNEL_DIR" ]] || die "no such directory: KERNEL_DIR: $KERNEL_DIR"
fi
export KERNEL_DIR
if [[ ! -v KBUILD_OUTPUT || -n "$KBUILD_OUTPUT" ]]
then
    [[ -v KBUILD_OUTPUT ]] || KBUILD_OUTPUT="$(readlink "/lib/modules/$kernelver/build")" || die 'readlink failed to read build directory symlink from /lib/modules, perhaps export KBUILD_OUTPUT explicitly?'
    [[ -d "$KBUILD_OUTPUT" ]] || die "no such directory: KBUILD_OUTPUT: $KBUILD_OUTPUT"
fi
export KBUILD_OUTPUT
export USE="$USE -pax_kernel"
zgrep -q '^CONFIG_PAX=y$' /proc/config.gz && USE="$USE pax_kernel"

# Print help
if [[ "$1" =~ ^(-h|--help)$ ]]
then
    cat <<-EOF
	  Usage: ${0##*/} <mode>
	
	Emerge wrapper that sets up a bunch of things (kernel-related variables,
	tmpfs) before calling emerge in one of several well-defined modes of
	operations.
	
	Emerge modes:
	  * package   (p): emerge -avA "\$@"
	  * world     (w): emerge -auvDNA --with-bdeps=y "\$@" world
	  * depclean  (d): emerge -aA "\$@" --depclean
	  * preserved (P): emerge -av1A "\$@" @preserved-rebuild
	  * resume    (r): emerge --resume "\$@"
	
	Kernel-related variables:
	  KERNEL_DIR="$KERNEL_DIR"
	  KBUILD_OUTPUT="$KBUILD_OUTPUT"
	  USE="$USE"
	
	Tmpfs-related variables:
	  PORTAGE_TMPDIR="$PORTAGE_TMPDIR"
	  PORTAGE_TMPDIR_SIZE="$PORTAGE_TMPDIR_SIZE"
	
	EOF
    exit
fi


# Cleanup function
cleanup() {
    # Stop sitting in the tmpfs
    cd / || echo "can't cd to /" >&2
    # Unmount PORTAGE_TMPDIR if empty
    shopt -s nullglob
    files=("$PORTAGE_TMPDIR"/*)
    if (( ${#files[@]} > 0 ))
    then
        echo "Files remain in $PORTAGE_TMPDIR, not unmounting."
    else
        umount -l "$PORTAGE_TMPDIR"
    fi
}


# Mount PORTAGE_TMPDIR as tmpfs and sit in there to prevent others from unmounting it beneath us
if [[ -n "$PORTAGE_TMPDIR" ]]
then
    "${0%/*}"/emerge-tmpfs "${PORTAGE_TMPDIR_SIZE:-9G}" || die "emerge-tmpfs failed to mount tmpfs on $PORTAGE_TMPDIR"
    trap -- cleanup EXIT
    cd "$PORTAGE_TMPDIR" || die "can't cd to $PORTAGE_TMPDIR"
    echo
fi

# Emerge!
case "$1" in
    r|resume)
        shift
        echo "> emerge --resume $*"
        emerge --resume "$@"
        ;;
    P|preserved)
        shift
        echo "> emerge -av1A $* @preserved-rebuild"
        emerge -av1A "$@" @preserved-rebuild
        ;;
    d|depclean)
        shift
        echo "> emerge -aA $* --depclean --exclude sys-kernel/gentoo-sources --exclude sys-kernel/hardened-sources"
        emerge -aA "$@" --depclean --exclude sys-kernel/gentoo-sources --exclude sys-kernel/hardened-sources
        ;;
    w|world|"")
        [[ -n "$1" ]] && shift || echo "Warning: no emerge type given, assuming 'world'" >&2
        echo "> emerge -auvDNA --with-bdeps=y $* world"
        emerge -auvDNA --with-bdeps=y "$@" world
        ;;
    p|package|*)
        [[ "$1" =~ ^(package|p)$ ]] && shift || echo "Warning: emerge type '$1' not recognized, defaulting to 'package'" >&2
        echo "> emerge -avA $*"
        emerge -avA "$@"
        ;;
esac

echo

# The cleanup() trap will fire now
